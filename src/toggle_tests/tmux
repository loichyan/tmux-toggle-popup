#!/usr/bin/env bash

set -eo pipefail
CURRENT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# shellcheck source=../helpers.sh
source "$CURRENT_DIR/../helpers.sh"

# Input variables
declare delimiter f_call_id f_input f_output

trace() {
	printf "\ttmux[$call_id]:%s\n" "$@" >&2
}

return_batch_options() {
	fake_batch_options \
		t_id_format="" \
		t_on_init="run '#{@popup_on_init}'" \
		t_before_open="run '#{@popup_before_open}'" \
		t_after_close="run '#{@popup_after_close}'" \
		t_toggle_mode="switch" \
		t_socket_name="popup_test" \
		t_socket_path="" \
		t_opened_name="" \
		t_caller_id_format="caller_id_format/{popup_name}" \
		t_caller_path="caller_session_path" \
		t_caller_pane_path="caller_pane_path" \
		t_default_id_format="default_id_format/{popup_name}" \
		t_default_shell="/default/shell" \
		t_session_path="working_session_path" \
		t_pane_path="working_pane_path"
	exit
}

normalize_output() {
	# Remove trailing spaces; add indents.
	awk '{ sub(/[[:space:]]+$/, ""); print "\t" $0 }'
}

parse_output() {
	while [[ $# -gt 0 ]]; do
		if [[ $1 == tmux* ]]; then
			# Fake a sh exec, redirecting output of nested tmux calls.
			nested_call=1 sh -c "$1" 3>&1
		else
			println "$1"
		fi
		shift
	done
}

dump_env() {
	while [[ $# -gt 0 ]]; do
		printf "%s=%s\n" "$1" "${!1}"
		shift
	done
}

declare call_id exit_code
main() {
	# The first call is always batch_get_options.
	# Discard its output since not particular useful.
	if [[ ! -f $f_call_id ]]; then
		call_id=0
		trace "batch_get_options"
		echo 1 >"$f_call_id"
		return_batch_options
	fi

	# Bump call ID
	call_id=$(cat "$f_call_id")
	echo "$((call_id + 1))" >"$f_call_id"

	# Trace tmux calls for debugging
	if [[ -n $TEST_VERBOSE ]]; then
		trace "call(${*})"
	else
		trace "call(${*:1:3} ...)"
	fi

	# Append arguments to output
	{
		echo ">>>TMUX:BEGIN[$call_id] {"
		dump_env TMUX_POPUP_SERVER SHELL | normalize_output
		echo "}"
		parse_output "$@" | normalize_output
		echo "<<<TMUX:END[$call_id]"
	} | {
		if [[ -n $nested_call ]]; then
			cat >&3
		else
			cat >>"$f_output"
		fi
	}

	# Fake tmux exit code
	read -r exit_code <"${f_input}_${call_id}"
	# shellcheck disable=SC2086
	exit $exit_code
}

main "$@"
